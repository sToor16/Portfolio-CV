{"version":3,"sources":["components/landing-page/landing-page-components/cv-components/nameAndPicture-Component/images/myPicure.png","components/landing-page/landing-page-components/cv-components/nameAndPicture-Component/nameAndPicture.js","components/landing-page/landing-page-components/cv-components/cv.js","components/landing-page/landing-page-components/about-me-components/heading-and-paragraph-components/headingAndParagraph.js","components/landing-page/landing-page-components/about-me-components/aboutMe.js","components/landing-page/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NameAndPicture","react_default","a","createElement","className","src","myPicutre","alt","CV","Component","HeadingAndParagraph","LandingPage","cv","library","add","faEnvelope","faPhoneVolume","faAddressCard","faCheckCircle","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yVCKjC,SAASC,IACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,uCAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,mCAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aAAcC,IAAKC,IAAWC,IAAI,qBCDnDC,mLARP,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACH,EAAD,cAJCS,yBCDV,SAASC,IACZ,OACIT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,YAGAH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAb,4RAOAH,EAAAC,EAAAC,cAAA,aCbMM,gBCWPE,mLATP,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACS,EAAD,cAJUH,6CCM1BI,IAAQC,IAAIC,IAAYC,IAAcC,IAAcC,SAgBrCC,mLAZP,OACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACInB,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,GAAGC,UAAWb,IAChCV,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAWb,aAPhDF,aCAEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d4472d28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/myPicure.aec55bf8.png\";","import React  from 'react';\nimport './nameAndPicture.css'\nimport '../sharedCSS/responsive.css'\nimport myPicutre from './images/myPicure.png'\n\nexport function NameAndPicture() {\n    return (\n        <div>\n            <div className=\"my-name-styles w3-center\">\n                <span>Toor, Shubhpreet Singh</span>\n            </div>\n            <div className=\"w3-center\">\n                <span>Software Developer</span>\n            </div>\n            <div className=\"w3-center\">\n                <img className={\"my-picture\"} src={myPicutre} alt=\"My Picture\"></img>\n            </div>\n        </div>\n    );\n}\n","import React, { Component } from 'react';\nimport {NameAndPicture} from \"./nameAndPicture-Component/nameAndPicture\";\nimport './sharedCSS/responsive.css'\n\nclass CV extends Component {\n    render() {\n        return (\n            <div>\n                <NameAndPicture/>\n            </div>\n        );\n    }\n}\n\nexport default CV;\n","import React  from 'react';\nimport './headingAndParagraph.css'\n\nexport function HeadingAndParagraph() {\n    return (\n        <div>\n            <div className=\"about-me-heading\">\n                ABOUT ME\n            </div>\n            <div>\n                <p className=\"about-me-paragraph\">\n                    Hi! I am Shubhpreet Singh Toor, a Software Engineer with\n                    strong understanding of Data Structures, Algorithms and ability to pick up\n                    new languages and frameworks quickly. Currently I am in final\n                    semester (Spring'19) of Master Degree in CS from The University of\n                    Texas at Arlington.\n                </p>\n                <hr></hr>\n            </div>\n        </div>\n\n    );\n}\n","import React, { Component } from 'react';\nimport './aboutMe.css'\nimport {HeadingAndParagraph} from \"./heading-and-paragraph-components/headingAndParagraph\";\n\nclass AboutMe extends Component {\n    render() {\n        return (\n            <div className=\"about-me-container w3-center\">\n               <HeadingAndParagraph/>\n            </div>\n        );\n    }\n}\n\nexport default AboutMe;\n","import React, { Component } from 'react';\nimport CV from \"./landing-page-components/cv-components/cv\";\nimport AboutMe from \"./landing-page-components/about-me-components/aboutMe\";\n\nclass LandingPage extends Component {\n    render() {\n        return (\n            <div>\n                <CV/>\n                {/*<AboutMe/>*/}\n            </div>\n        );\n    }\n}\n\nexport default LandingPage;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route} from \"react-router-dom\";\nimport LandingPage from \"./components/landing-page/LandingPage\";\n\nimport './App.css';\nimport {NavBar} from \"./components/shared/NavBar\";\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {faPhoneVolume, faEnvelope, faAddressCard, faCheckCircle} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faEnvelope, faPhoneVolume,faAddressCard,faCheckCircle);\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div>\n                    {/*<NavBar/>*/}\n                    <Route exact path=\"\" component={LandingPage}/>\n                    <Route exact path=\"/portfolio-cv/\" component={LandingPage}/>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'w3-css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}